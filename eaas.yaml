tosca_definitions_version: cloudify_dsl_1_3


imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-ansible-plugin

inputs:

  cloud:
    type: string
    default: aws
    constraints:
      - valid_values:
          - aws
          - gcp

  env_type:
    type: string
    default: dev
    constraints:
      - valid_values:
        - dev
        - qa
        - prod

  ttl:
    type: integer
    description: |
      Minutes of time to live after which the environment will be uninstalled
    default: 60
  
  app_type:
    type: string
    description: |
      Webserver type
    default: nginx
    constraints:
      - valid_values:
        - nginx

  app_port:
    type: integer
    description: |
      Port to be used in the webserver
    default: 80
    constraints:
      - valid_values:
        - 80
        - 8080
        - 8081

  app_version:
    type: string
    description: |
      Version of the webserver package to be installed
    default: 1.18.0-0ubuntu1.2
    constraints:
      - valid_values:
        - 1.18.0-0ubuntu1.2
        - 1.18.0-1~focal
        - 1.18.0-2~focal
        - 1.20.0-1~focal
        - 1.20.1-1~focal
        - 1.20.2-1~focal

node_templates:

  server:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          id: { get_secret: [eaas_params, { get_input: cloud }, { get_input: env_type }, blueprint] }
          external_resource: true
        deployment:
          id: { get_secret: [eaas_params, { get_input: cloud }, { get_input: env_type }, deployment] }
          inputs:
            resource_config: { get_secret: [eaas_params, { get_input: cloud }, { get_input: env_type }, inputs] }
          auto_inc_suffix: true

  app:
    type: cloudify.nodes.ansible.Playbook
    interfaces:
      cloudify.interfaces.lifecycle:
        poststart: {}
    relationships:
      - type: cloudify.ansible.relationships.run_on_host
        target: server
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                playbook_path: { concat: [ "playbooks", "/", { get_input: app_type }, "/", "site.yaml" ] }
                sources: &sources
                  webservers:
                    hosts:
                      web:
                        ansible_host: { get_attribute: [ TARGET, capabilities, ip_address ] }
                        ansible_user: ubuntu
                        ansible_ssh_private_key_file: { get_secret: private_key_content }
                        ansible_become: true
                        ansible_ssh_common_args: -o StrictHostKeyChecking=no
                run_data:
                  message: { get_secret: [eaas_params, { get_input: cloud }, { get_input: env_type }, message] }
                  version: { get_input: app_version }
                  port: { get_input: app_port }
            unlink:
              implementation: ansible.cloudify_ansible.tasks.run
              inputs:
                playbook_path: { concat: [ "playbooks", "/", { get_input: app_type }, "/", "cleanup.yaml" ] }
                sources: *sources

groups:
  server_and_app:
    members: [server, app]


policies:
  scaling_policy:
    type: cloudify.policies.scaling
    targets: [server_and_app]